 Modular Arithmetic
Support operations in modular arithmetic, widely used in cryptography and number theory.

Modulo:
typescript
Copy code
export function modulo(a: number, b: number): number {
  return ((a % b) + b) % b; // Handles negative numbers
}
Modular Exponentiation (Efficient Calculation):
typescript
Copy code
export function modExp(base: number, exp: number, mod: number): number {
  let result = 1;
  base = base % mod;
  while (exp > 0) {
    if (exp % 2 === 1) result = (result * base) % mod;
    exp = Math.floor(exp / 2);
    base = (base * base) % mod;
  }
  return result;
}
2. Power and Roots
Include functions to calculate powers and roots.

Power:
typescript
Copy code
export function power(base: number, exponent: number): number {
  return Math.pow(base, exponent);
}
Nth Root:
typescript
Copy code
export function nthRoot(value: number, n: number): number {
  if (n <= 0) throw new Error('Root must be positive');
  return Math.pow(value, 1 / n);
}
3. Factorial and Related Functions
Implement factorials and variations for combinatorics.

Factorial:
typescript
Copy code
export function factorial(n: number): number {
  if (n < 0) throw new Error('Factorial is not defined for negative numbers');
  return n === 0 ? 1 : n * factorial(n - 1);
}
Double Factorial (Odd or Even Factorials):
typescript
Copy code
export function doubleFactorial(n: number): number {
  if (n < 0) throw new Error('Double factorial is not defined for negative numbers');
  return n <= 1 ? 1 : n * doubleFactorial(n - 2);
}
4. Summation and Products
Aggregate operations for arrays of numbers.

Summation:
typescript
Copy code
export function sum(numbers: number[]): number {
  return numbers.reduce((acc, num) => acc + num, 0);
}
Product:
typescript
Copy code
export function product(numbers: number[]): number {
  return numbers.reduce((acc, num) => acc * num, 1);
}
5. Average and Weighted Average
Calculate averages of numbers with ease.

Arithmetic Mean:
typescript
Copy code
export function mean(numbers: number[]): number {
  return sum(numbers) / numbers.length;
}
Weighted Average:
typescript
Copy code
export function weightedMean(numbers: number[], weights: number[]): number {
  if (numbers.length !== weights.length) throw new Error('Numbers and weights must be of the same length');
  const totalWeight = sum(weights);
  return numbers.reduce((acc, num, i) => acc + num * weights[i], 0) / totalWeight;
}
6. Range and Difference
Support simple comparative calculations.

Range:
typescript
Copy code
export function range(numbers: number[]): number {
  return Math.max(...numbers) - Math.min(...numbers);
}
Absolute Difference:
typescript
Copy code
export function absoluteDifference(a: number, b: number): number {
  return Math.abs(a - b);
}
7. Arithmetic Progression Utilities
Support series-based calculations.

Sum of Arithmetic Progression:
typescript
Copy code
export function arithmeticSum(first: number, last: number, count: number): number {
  return (count / 2) * (first + last);
}
Nth Term of Arithmetic Progression:
typescript
Copy code
export function nthTermAP(first: number, diff: number, n: number): number {
  return first + (n - 1) * diff;
}
